{"version":3,"sources":["RegisterProperty.js","getWeb3.js","PropertyCard.js","Dashboard.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["RegisterProperty","props","onFileSelection","e","allFiles","target","files","setState","selectedFiles","property","file","reader","FileReader","readAsArrayBuffer","onloadend","newImage","buffer","Buffer","result","state","error","console","handleSubmit","preventDefault","log","flatType","furnishing","area","address","availableFrom","rent","deposit","this","className","onSubmit","htmlFor","id","value","onChange","disabled","type","rows","style","overflow","resize","min","multiple","accept","map","item","key","src","URL","createObjectURL","alt","class","Component","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","provider","providers","HttpProvider","PropertyCard","href","Dashboard","IPFS","host","config","ipfsEndpoint","port","ipfsPort","protocol","ipfsSecurityProtocol","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","storageValue","accounts","contract","transactionHash","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","alert","runExample","methods","set","send","from","on","hash","get","call","response","path","exact","component","Register","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17863f3c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { RMIUploader } from \"react-multiple-image-uploader\";\r\n\r\nexport default class RegisterProperty extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            flatType: \"\",\r\n            furnishing: \"\",\r\n            area: 0,\r\n            address: \"\",\r\n            availableFrom: \"\",\r\n            rent: 0,\r\n            deposit: 0,\r\n            selectedFiles: []\r\n        }\r\n    }\r\n\r\n    onFileSelection = (e) => {\r\n        const allFiles = e.target.files;\r\n        this.setState({ selectedFiles: [] });\r\n\r\n        for (const property in allFiles) {\r\n            if (typeof (allFiles[property]) !== 'object') continue;\r\n\r\n            let file = allFiles[property];\r\n            try {\r\n                const reader = new FileReader();\r\n\r\n                reader.readAsArrayBuffer(file);\r\n                reader.onloadend = () => {\r\n                    const newImage = {\r\n                        file: file,\r\n                        buffer: Buffer(reader.result)\r\n                    }\r\n                    this.setState({ selectedFiles: [...this.state.selectedFiles, newImage] });\r\n                }\r\n            } catch (error) {\r\n                console.error('File Error');\r\n            }\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { selectedFiles } = this.state;\r\n\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid bg-transparent m-0\">\r\n                <div className=\"container container-fluid p-5\">\r\n                    <header className=\"section-heading\">\r\n                        <h1 className=\"section-title text-center\">Rent out...</h1>\r\n                    </header>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-7\">\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <h3>\r\n                                    <small className=\"text-muted\">Property Details</small>\r\n                                </h3>\r\n                                <hr />\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputFirstName\">Flat Type</label>\r\n                                        <select id=\"inputBG\" className=\"form-control\"\r\n                                            value={this.state.flatType} onChange={(e) => { this.setState({ flatType: e.target.value }) }}\r\n                                        >\r\n                                            <option value=\"\" disabled></option>\r\n                                            <option value=\"1RK\">1 RK</option>\r\n                                            <option value=\"1BHK\">1 BHK</option>\r\n                                            <option value=\"2BHK\">2 BHK</option>\r\n                                            <option value=\"3BHK\">3 BHK</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputLastName\">Furnishing</label>\r\n                                        <select id=\"inputBG\" className=\"form-control\"\r\n                                            value={this.state.furnishing} onChange={(e) => { this.setState({ furnishing: e.target.value }) }}\r\n                                        >\r\n                                            <option value=\"\" disabled></option>\r\n                                            <option value=\"FullyFurnished\">Fully Furnished</option>\r\n                                            <option value=\"SemiFurnished\">Semi Furnished</option>\r\n                                            <option value=\"None\">None</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputUID\">Address</label>\r\n                                        <textarea type=\"text\" className=\"form-control\" rows=\"3\" style={{ overflow: 'auto', resize: 'none' }}\r\n                                            value={this.state.address} onChange={(e) => { this.setState({ address: e.target.value }) }}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputGender\">Area</label>\r\n                                        <input type=\"number\" min=\"0\" className=\"form-control\"\r\n                                            value={this.state.area} onChange={(e) => { this.setState({ area: e.target.value }) }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputDOB\">Available From</label>\r\n                                        <input type=\"date\" className=\"form-control\"\r\n                                            value={this.state.availableFrom} onChange={(e) => { this.setState({ availableFrom: e.target.value }) }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <h3>\r\n                                    <small className=\"text-muted\">Expenses</small>\r\n                                </h3>\r\n                                <hr />\r\n\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputState\">Rent</label>\r\n                                        <div className=\"input-group mb-2\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <div className=\"input-group-text\">Rs.</div>\r\n                                            </div>\r\n                                            <input type=\"number\" min=\"0\" className=\"form-control\"\r\n                                                value={this.state.rent} onChange={(e) => { this.setState({ rent: e.target.value }) }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputCity\">Security Deposit</label>\r\n                                        <div className=\"input-group mb-2\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <div className=\"input-group-text\">Rs.</div>\r\n                                            </div>\r\n                                            <input type=\"number\" min=\"0\" className=\"form-control\"\r\n                                                value={this.state.deposit} onChange={(e) => { this.setState({ deposit: e.target.value }) }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <h3>\r\n                                    <small className=\"text-muted\">Property Images</small>\r\n                                </h3>\r\n                                <hr />\r\n\r\n                                <div className=\"form-row\">\r\n                                    <div className=\"col-md-6 mb-3\">\r\n                                        <label htmlFor=\"inputReportFile\">Upload</label>\r\n                                        <input type=\"file\" className=\"form-control-file\" multiple=\"multiple\" accept=\"image/x-png,image/gif,image/jpeg\"\r\n                                            onChange={this.onFileSelection}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                        <div className=\"row\">\r\n                                            {\r\n                                                selectedFiles.map((item, key) => {\r\n                                                    return <img key={key} src={URL.createObjectURL(item.file)} alt=\"...\" class=\"img-thumbnail img-thumbnail-custom rounded\" />\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"col-md-6 mb-3\">\r\n                                    <label htmlFor=\"emptyLabel\"></label>\r\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Register</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\r\n\r\n\r\nexport default class PropertyCard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Property w-100 p-2\">\r\n                <div className=\"card card-product-list bg-light mb-3\">\r\n                    <div className=\"row no-gutters\">\r\n                        <div className=\"col-md-3 p-3 align-middle\">\r\n                            <img src={'https://5.imimg.com/data5/VA/XX/GV/GLADMIN-46813453/3-bhk-flats-in-patna-840x480-500x500.jpg'} className=\"img-thumbnail\" alt=\"...\" />\r\n                        </div>\r\n                        <div className=\"col-md-6 p-2\">\r\n                            <div className=\"info-main\">\r\n                                <div className=\"h3 title property-title\"> {'3BHK'} - {'Fully Furnished'} </div>\r\n                                <dl className=\"row property-description\">\r\n                                    <dt className=\"col-sm-3\">Address</dt>\r\n                                    <dd className=\"col-sm-9\">{'3500 Deer Creek Road Palo Alto, CA 94304'}</dd>\r\n\r\n                                    <dt className=\"col-sm-3\">Area</dt>\r\n                                    <dd className=\"col-sm-9\">{'12345'} sqft.</dd>\r\n\r\n                                    <dt className=\"col-sm-3\">Schedule Visit</dt>\r\n                                    <dd className=\"col-sm-9\"><a href=\"tel:8507783427\" className=\"text-decoration-none link-info\">{'8507783427'}</a></dd>\r\n                                </dl>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-3 p-2\">\r\n                            <div className=\"info-aside\">\r\n                                <div className=\"price-wrap\">\r\n                                    <span className=\"rent h5 text-end\">Rent: {'$56'} </span>\r\n                                    <br />\r\n                                    <span className=\"rent h5\">Security: {'$1000'} </span>\r\n                                </div>\r\n                                <br />\r\n                                <p>\r\n                                    <a href=\"#\" className=\"btn btn-primary btn-block\"> Details </a>\r\n                                </p>\r\n                                <p>\r\n                                    Available from: <span className=\"rent h6\"> {'Today'} </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport IPFS from 'ipfs-http-client';\r\nimport config from './config.json';\r\nimport Property from './PropertyCard';\r\n\r\nexport class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const client = new IPFS({\r\n            host: config.ipfsEndpoint,\r\n            port: config.ipfsPort,\r\n            protocol: config.ipfsSecurityProtocol\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dashboard\">\r\n                <div className=\"jumbotron jumbotron-fluid bg-transparent m-0\">\r\n                    <div className=\"container container-fluid p-5\">\r\n                        <header className=\"section-heading\">\r\n                            <h1 className=\"section-title text-center\">Catalog</h1>\r\n                        </header>\r\n                        <div className=\"container container-fluid p-5\">\r\n                            <div className=\"list-group mx-auto\">\r\n                                <Property />\r\n                                <Property />\r\n                                <Property />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Navbar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav\r\n                className=\"navbar navbar-expand-lg fixed-top navbar-light shadow-lg rounded bg-light\"\r\n            >\r\n                {/* <a className=\"navbar-brand navbar-nav\" href=\"/\">\r\n                    <h2>\r\n                        Home\r\n                    </h2>\r\n                </a> */}\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-toggle=\"collapse\"\r\n                    data-target=\"#navbarTogglerDemo02\"\r\n                    aria-controls=\"navbarTogglerDemo02\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n                    <ul className=\"navbar-nav mr-auto\"></ul>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item active\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\r\n                            <a className=\"nav-link\" href=\"/\"><h3>Dashboard</h3></a>\r\n                        </li>\r\n                        <li className=\"nav-item active\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\r\n                            <a className=\"nav-link\" href=\"/property\"><h3>Rent Out</h3></a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport RealEstateRentalContract from \"./contracts/RealEstateRental.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport Dashboard from './Dashboard';\nimport Register from './RegisterProperty'\nimport Navbar from \"./Navbar\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    transactionHash: 'No transactions yet'\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // const deployedNetwork = RealEstateRentalContract.networks[networkId];\n      // const instance = new web3.eth.Contract(\n      //   RealEstateRentalContract.abi,\n      //   deployedNetwork && deployedNetwork.address,\n      // );\n\n      // console.log(instance);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState(\n        {\n          web3, accounts, contract: instance\n        },\n        // this.runExample\n      );\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(5).send({ from: accounts[0] })\n      .on('transactionHash', (hash) => {\n        this.setState({ transactionHash: hash });\n      });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    // return (\n    //   <div className=\"App\">\n    //     <h1>Good to Go!</h1>\n    //     <p>Your Truffle Box is installed and ready.</p>\n    //     <h2>Smart Contract Example</h2>\n    //     <p>\n    //       If your contracts compiled and migrated successfully, below will show\n    //       a stored value of 5 (by default).\n    //     </p>\n    //     <p>\n    //       Try changing the value stored on <strong>line 40</strong> of App.js.\n    //     </p>\n    //     <div>The stored value is: {this.state.storageValue}</div>\n    //     <button onClick={this.runExample}>Send 5 GWEI</button>\n    //     <h3>Transaction Hash is: {this.state.transactionHash}</h3>\n    //   </div>\n    // );\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar />\n          <Route path=\"/\" exact component={Dashboard} />\n          <Route path=\"/property\" exact component={Register} />\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}